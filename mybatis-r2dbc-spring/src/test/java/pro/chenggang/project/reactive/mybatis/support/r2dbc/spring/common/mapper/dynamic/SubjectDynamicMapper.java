/*
 *    Copyright 2009-2024 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.mapper.dynamic;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.type.JdbcType;
import org.mybatis.dynamic.sql.BasicColumn;
import org.mybatis.dynamic.sql.delete.DeleteDSLCompleter;
import org.mybatis.dynamic.sql.select.CountDSLCompleter;
import org.mybatis.dynamic.sql.select.SelectDSLCompleter;
import org.mybatis.dynamic.sql.select.render.SelectStatementProvider;
import org.mybatis.dynamic.sql.update.UpdateDSLCompleter;
import org.mybatis.dynamic.sql.util.SqlProviderAdapter;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonCountMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonDeleteMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonInsertMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonSelectMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonUpdateMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.ReactiveMyBatis3Utils;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.entity.Subject;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.Collection;

import static pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.mapper.dynamic.SubjectDynamicSqlSupport.active;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.mapper.dynamic.SubjectDynamicSqlSupport.age;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.mapper.dynamic.SubjectDynamicSqlSupport.dt;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.mapper.dynamic.SubjectDynamicSqlSupport.height;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.mapper.dynamic.SubjectDynamicSqlSupport.id;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.mapper.dynamic.SubjectDynamicSqlSupport.length;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.mapper.dynamic.SubjectDynamicSqlSupport.name;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.mapper.dynamic.SubjectDynamicSqlSupport.subject;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.spring.common.mapper.dynamic.SubjectDynamicSqlSupport.weight;

/**
 * auto generated mapper
 * 
 * @author AutoGenerated
 */
@Mapper
public interface SubjectDynamicMapper extends CommonSelectMapper, CommonCountMapper, CommonDeleteMapper, CommonInsertMapper<Subject>, CommonUpdateMapper {
    BasicColumn[] selectList = BasicColumn.columnList(id, name, age, height, weight, active, dt, length);

    @SelectProvider(type=SqlProviderAdapter.class, method="select")
    @Results(id="SubjectResult", value = {
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER),
        @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="age", property="age", jdbcType=JdbcType.INTEGER),
        @Result(column="height", property="height", jdbcType=JdbcType.INTEGER),
        @Result(column="weight", property="weight", jdbcType=JdbcType.INTEGER),
        @Result(column="active", property="active", jdbcType=JdbcType.BIT),
        @Result(column="dt", property="dt", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="length", property="length", jdbcType=JdbcType.BIGINT)
    })
    Flux<Subject> selectMany(SelectStatementProvider selectStatement);

    @SelectProvider(type=SqlProviderAdapter.class, method="select")
    @ResultMap("SubjectResult")
    Mono<Subject> selectOne(SelectStatementProvider selectStatement);

    default Mono<Long> count(CountDSLCompleter completer) {
        return ReactiveMyBatis3Utils.countFrom(this::count, subject, completer);
    }

    default Mono<Integer> delete(DeleteDSLCompleter completer) {
        return ReactiveMyBatis3Utils.deleteFrom(this::delete, subject, completer);
    }

    default Mono<Integer> insert(Subject row) {
        return ReactiveMyBatis3Utils.insert(this::insert, row, subject, c ->
            c.map(id).toProperty("id")
            .map(name).toProperty("name")
            .map(age).toProperty("age")
            .map(height).toProperty("height")
            .map(weight).toProperty("weight")
            .map(active).toProperty("active")
            .map(dt).toProperty("dt")
            .map(length).toProperty("length")
        );
    }

    default Mono<Integer> insertMultiple(Collection<Subject> records) {
        return ReactiveMyBatis3Utils.insertMultiple(this::insertMultiple, records, subject, c ->
            c.map(id).toProperty("id")
            .map(name).toProperty("name")
            .map(age).toProperty("age")
            .map(height).toProperty("height")
            .map(weight).toProperty("weight")
            .map(active).toProperty("active")
            .map(dt).toProperty("dt")
            .map(length).toProperty("length")
        );
    }

    default Mono<Integer> insertSelective(Subject row) {
        return ReactiveMyBatis3Utils.insert(this::insert, row, subject, c ->
            c.map(id).toPropertyWhenPresent("id", row::getId)
            .map(name).toPropertyWhenPresent("name", row::getName)
            .map(age).toPropertyWhenPresent("age", row::getAge)
            .map(height).toPropertyWhenPresent("height", row::getHeight)
            .map(weight).toPropertyWhenPresent("weight", row::getWeight)
            .map(active).toPropertyWhenPresent("active", row::getActive)
            .map(dt).toPropertyWhenPresent("dt", row::getDt)
            .map(length).toPropertyWhenPresent("length", row::getLength)
        );
    }

    default Mono<Subject> selectOne(SelectDSLCompleter completer) {
        return ReactiveMyBatis3Utils.selectOne(this::selectOne, selectList, subject, completer);
    }

    default Flux<Subject> select(SelectDSLCompleter completer) {
        return ReactiveMyBatis3Utils.selectList(this::selectMany, selectList, subject, completer);
    }

    default Flux<Subject> selectDistinct(SelectDSLCompleter completer) {
        return ReactiveMyBatis3Utils.selectDistinct(this::selectMany, selectList, subject, completer);
    }

    default Mono<Integer> update(UpdateDSLCompleter completer) {
        return ReactiveMyBatis3Utils.update(this::update, subject, completer);
    }

    default Mono<Integer> updateSelectiveByPrimaryKey(Subject row) {
        return update(c ->
            c.set(id).equalToWhenPresent(row::getId)
            .set(name).equalToWhenPresent(row::getName)
            .set(age).equalToWhenPresent(row::getAge)
            .set(height).equalToWhenPresent(row::getHeight)
            .set(weight).equalToWhenPresent(row::getWeight)
            .set(active).equalToWhenPresent(row::getActive)
            .set(dt).equalToWhenPresent(row::getDt)
            .set(length).equalToWhenPresent(row::getLength)
        );
    }

    default Mono<Integer> updateAllByPrimaryKey(Subject row) {
        return update(c ->
            c.set(id).equalToWhenPresent(row::getId)
            .set(name).equalTo(row::getName)
            .set(age).equalToWhenPresent(row::getAge)
            .set(height).equalTo(row::getHeight)
            .set(weight).equalTo(row::getWeight)
            .set(active).equalTo(row::getActive)
            .set(dt).equalToWhenPresent(row::getDt)
            .set(length).equalTo(row::getLength)
        );
    }
}