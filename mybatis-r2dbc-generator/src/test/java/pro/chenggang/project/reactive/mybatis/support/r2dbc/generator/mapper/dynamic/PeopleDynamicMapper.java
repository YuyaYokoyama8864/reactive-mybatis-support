package pro.chenggang.project.reactive.mybatis.support.r2dbc.generator.mapper.dynamic;

import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;
import org.mybatis.dynamic.sql.BasicColumn;
import org.mybatis.dynamic.sql.delete.DeleteDSLCompleter;
import org.mybatis.dynamic.sql.delete.render.DeleteStatementProvider;
import org.mybatis.dynamic.sql.insert.render.InsertStatementProvider;
import org.mybatis.dynamic.sql.insert.render.MultiRowInsertStatementProvider;
import org.mybatis.dynamic.sql.select.CountDSLCompleter;
import org.mybatis.dynamic.sql.select.SelectDSLCompleter;
import org.mybatis.dynamic.sql.select.render.SelectStatementProvider;
import org.mybatis.dynamic.sql.update.UpdateDSLCompleter;
import org.mybatis.dynamic.sql.update.render.UpdateStatementProvider;
import org.mybatis.dynamic.sql.util.SqlProviderAdapter;
import org.mybatis.dynamic.sql.where.WhereApplier;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonSelectMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.MyBatis3Utils;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.generator.entity.model.People;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.Collection;

import static org.mybatis.dynamic.sql.SqlBuilder.isEqualTo;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.generator.mapper.dynamic.PeopleDynamicSqlSupport.createdAt;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.generator.mapper.dynamic.PeopleDynamicSqlSupport.id;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.generator.mapper.dynamic.PeopleDynamicSqlSupport.nick;
import static pro.chenggang.project.reactive.mybatis.support.r2dbc.generator.mapper.dynamic.PeopleDynamicSqlSupport.people;

/**
 * auto generated
 * @author AutoGenerated
 */
@Mapper
public interface PeopleDynamicMapper extends CommonSelectMapper {
    BasicColumn[] selectList = BasicColumn.columnList(id, nick, createdAt);

    @SelectProvider(type=SqlProviderAdapter.class, method="select")
    Mono<Long> count(SelectStatementProvider selectStatement);

    @DeleteProvider(type=SqlProviderAdapter.class, method="delete")
    Mono<Integer> delete(DeleteStatementProvider deleteStatement);

    @InsertProvider(type=SqlProviderAdapter.class, method="insert")
    @Options(useGeneratedKeys = true,keyProperty = "record.id")
    Mono<Integer> insert(InsertStatementProvider<People> insertStatement);

    @InsertProvider(type=SqlProviderAdapter.class, method="insertMultiple")
    Mono<Integer> insertMultiple(MultiRowInsertStatementProvider<People> multipleInsertStatement);

    @SelectProvider(type=SqlProviderAdapter.class, method="select")
    @ResultMap("PeopleResult")
    Mono<People> selectOne(SelectStatementProvider selectStatement);

    @SelectProvider(type=SqlProviderAdapter.class, method="select")
    @Results(id="PeopleResult", value = {
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="nick", property="nick", jdbcType=JdbcType.VARCHAR),
        @Result(column="created_at", property="createdAt", jdbcType=JdbcType.TIMESTAMP)
    })
    Flux<People> selectMany(SelectStatementProvider selectStatement);

    @UpdateProvider(type=SqlProviderAdapter.class, method="update")
    Mono<Integer> update(UpdateStatementProvider updateStatement);

    default Mono<Long> count(CountDSLCompleter completer) {
        return MyBatis3Utils.countFrom(this::count, people, completer);
    }

    default Mono<Integer> delete(DeleteDSLCompleter completer) {
        return MyBatis3Utils.deleteFrom(this::delete, people, completer);
    }

    default Mono<Integer> insert(People record) {
        return MyBatis3Utils.insert(this::insert, record, people, c ->
            c.map(id).toProperty("id")
            .map(nick).toProperty("nick")
            .map(createdAt).toProperty("createdAt")
        );
    }

    default Mono<Integer> insertMultiple(Collection<People> records) {
        return MyBatis3Utils.insertMultiple(this::insertMultiple, records, people, c ->
            c.map(id).toProperty("id")
            .map(nick).toProperty("nick")
            .map(createdAt).toProperty("createdAt")
        );
    }

    default Mono<Integer> insertSelective(People record) {
        return MyBatis3Utils.insert(this::insert, record, people, c ->
            c.map(id).toPropertyWhenPresent("id", record::getId)
            .map(nick).toPropertyWhenPresent("nick", record::getNick)
            .map(createdAt).toPropertyWhenPresent("createdAt", record::getCreatedAt)
        );
    }

    default Mono<People> selectOne(SelectDSLCompleter completer) {
        return MyBatis3Utils.selectOne(this::selectOne, selectList, people, completer);
    }

    default Flux<People> select(SelectDSLCompleter completer) {
        return MyBatis3Utils.selectList(this::selectMany, selectList, people, completer);
    }

    default Flux<People> selectDistinct(SelectDSLCompleter completer) {
        return MyBatis3Utils.selectDistinct(this::selectMany, selectList, people, completer);
    }

    default Mono<Integer> update(UpdateDSLCompleter completer) {
        return MyBatis3Utils.update(this::update, people, completer);
    }

    default Mono<Integer> updateAll(People record, WhereApplier whereApplier) {
        return update(c ->
            c.set(nick).equalTo(record::getNick)
            .set(createdAt).equalTo(record::getCreatedAt)
            .applyWhere(whereApplier)
        );
    }

    default Mono<Integer> updateAllByPrimaryKey(People record) {
        return update(c ->
            c.set(nick).equalTo(record::getNick)
            .set(createdAt).equalTo(record::getCreatedAt)
            .where(id, isEqualTo(record::getId))
        );
    }

    default Mono<Integer> updateSelective(People record, WhereApplier whereApplier) {
        return update(c ->
            c.set(nick).equalToWhenPresent(record::getNick)
            .set(createdAt).equalToWhenPresent(record::getCreatedAt)
            .applyWhere(whereApplier)
        );
    }
}